# -*- coding: utf-8 -*-
"""
Script de teste para criar artigos usando o MCP Server
"""

import asyncio
import json
import sys
import os

# Adiciona o diret√≥rio atual ao path para importar o m√≥dulo
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importa a classe do servidor MCP
from mcp_server import ZiroBlogMCPServer

async def test_create_article():
    """Testa a cria√ß√£o de um artigo"""
    print("üß™ Testando cria√ß√£o de artigo...")
    
    server = ZiroBlogMCPServer()
    
    # Conectar ao banco de dados
    if not await server.connect_database():
        print("‚ùå Falha ao conectar ao banco de dados")
        return
    
    # Dados do artigo de teste
    article_data = {
        "title": "Como o MCP Server revoluciona a cria√ß√£o de conte√∫do",
        "content": """
        <h2>Introdu√ß√£o</h2>
        <p>O Model Context Protocol (MCP) est√° transformando a forma como criamos e gerenciamos conte√∫do digital. 
        Com a integra√ß√£o do MCP Server ao nosso blog Ziro, conseguimos automatizar e otimizar todo o processo de cria√ß√£o de artigos.</p>
        
        <h2>Benef√≠cios do MCP Server</h2>
        <ul>
            <li><strong>Automa√ß√£o completa:</strong> Cria√ß√£o autom√°tica de artigos diretamente pelo Cursor</li>
            <li><strong>Integra√ß√£o perfeita:</strong> Conex√£o direta com banco de dados MySQL</li>
            <li><strong>SEO otimizado:</strong> Gera√ß√£o autom√°tica de slugs e metadados</li>
            <li><strong>Gest√£o de categorias:</strong> Cria√ß√£o autom√°tica de categorias e tags</li>
        </ul>
        
        <h2>Como funciona</h2>
        <p>O MCP Server atua como uma ponte entre o Cursor e nosso banco de dados, permitindo que voc√™:</p>
        <ol>
            <li>Pesquise artigos existentes</li>
            <li>Crie novos artigos com todos os metadados</li>
            <li>Gerencie categorias e tags automaticamente</li>
            <li>Monitore estat√≠sticas do blog</li>
        </ol>
        
        <h2>Exemplo pr√°tico</h2>
        <p>Para criar um novo artigo, basta usar a ferramenta <code>create_article</code> com os dados necess√°rios. 
        O sistema automaticamente:</p>
        <ul>
            <li>Gera um slug √∫nico baseado no t√≠tulo</li>
            <li>Cria categorias se n√£o existirem</li>
            <li>Associa tags automaticamente</li>
            <li>Define metadados SEO</li>
        </ul>
        
        <h2>Conclus√£o</h2>
        <p>A implementa√ß√£o do MCP Server no blog Ziro representa um avan√ßo significativo em nossa capacidade de 
        criar e gerenciar conte√∫do de forma eficiente e automatizada.</p>
        """,
        "excerpt": "Descubra como o MCP Server est√° revolucionando a cria√ß√£o de conte√∫do no blog Ziro, automatizando todo o processo de cria√ß√£o de artigos.",
        "category": "Tecnologia",
        "tags": ["MCP", "Automa√ß√£o", "Blog", "Tecnologia", "Cursor"],
        "status": "draft",
        "is_featured": True,
        "seo_title": "MCP Server: Revolu√ß√£o na Cria√ß√£o de Conte√∫do - Ziro Blog",
        "seo_description": "Descubra como o MCP Server automatiza a cria√ß√£o de artigos no blog Ziro, otimizando SEO e produtividade.",
        "seo_keywords": "MCP Server, automa√ß√£o, blog, cria√ß√£o de conte√∫do, SEO, Cursor"
    }
    
    # Criar o artigo
    result = server.create_article(article_data)
    
    if result.get("success"):
        print("‚úÖ Artigo criado com sucesso!")
        print(f"üìù ID do artigo: {result['article_id']}")
        print(f"üîó Slug: {result['slug']}")
        print(f"üåê URL: {result['url']}")
        print(f"üìä Status: {result['status']}")
    else:
        print(f"‚ùå Erro ao criar artigo: {result.get('error')}")

async def test_search_articles():
    """Testa a busca de artigos"""
    print("\nüîç Testando busca de artigos...")
    
    server = ZiroBlogMCPServer()
    
    if not await server.connect_database():
        return
    
    # Buscar artigos sobre MCP
    articles = server.search_articles("MCP", limit=5)
    
    if articles and not articles[0].get("error"):
        print(f"üìö Encontrados {len(articles)} artigos:")
        for article in articles:
            print(f"  - {article['title']} (ID: {article['id']})")
    else:
        print("‚ùå Erro na busca ou nenhum artigo encontrado")

async def main():
    """Fun√ß√£o principal"""
    print("üöÄ Iniciando testes do MCP Server - Cria√ß√£o de Artigos")
    print("=" * 60)
    
    # Teste de cria√ß√£o de artigo
    await test_create_article()
    
    # Teste de busca
    await test_search_articles()
    
    print("\n‚úÖ Testes conclu√≠dos!")

if __name__ == "__main__":
    asyncio.run(main())